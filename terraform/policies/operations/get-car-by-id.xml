<policies>
    <inbound>
        <!-- Operation-specific caching for get car by ID -->
        <cache-lookup vary-by-developer="false" vary-by-developer-groups="false" downstream-caching-type="none" />
        
        <!-- Extract and validate car ID from URL path -->
        <set-variable name="carId" value="@(context.Request.Url.Path.Split('/').Last())" />
        
        <!-- Validate car ID parameter -->
        <choose>
            <when condition="@(!int.TryParse((string)context.Variables["carId"], out int carIdNum) || carIdNum < 1)">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/problem+json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("type", "https://tools.ietf.org/html/rfc7231#section-6.5.1"),
                            new JProperty("title", "Bad Request"),
                            new JProperty("status", 400),
                            new JProperty("detail", "Invalid car ID. Must be a positive integer."),
                            new JProperty("instance", context.Request.Url.Path),
                            new JProperty("invalid-params", new JArray(
                                new JObject(
                                    new JProperty("name", "carId"),
                                    new JProperty("reason", "Must be a positive integer"),
                                    new JProperty("value", (string)context.Variables["carId"])
                                )
                            ))
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <!-- Add request metadata -->
        <set-header name="X-Request-ID" exists-action="override">
            <value>@(Guid.NewGuid().ToString())</value>
        </set-header>
        
        <trace source="get-car-by-id-operation">
            <message>@{
                return $"Requesting car details - ID: {context.Variables["carId"]}";
            }</message>
        </trace>
    </inbound>
    
    <backend>
        <forward-request />
    </backend>
    
    <outbound>
        <!-- Cache successful responses -->
        <choose>
            <when condition="@(context.Response.StatusCode == 200)">
                <cache-store duration="${cache_duration}" />
                
                <!-- Add cache headers for successful responses -->
                <set-header name="Cache-Control" exists-action="override">
                    <value>public, max-age=${cache_duration}</value>
                </set-header>
                <set-header name="ETag" exists-action="override">
                    <value>@("\"car-" + (string)context.Variables["carId"] + "-" + context.Response.Body.As<string>().GetHashCode().ToString() + "\"")</value>
                </set-header>
                <set-header name="Last-Modified" exists-action="override">
                    <value>@(DateTime.UtcNow.AddHours(-1).ToString("r"))</value>
                </set-header>
            </when>
            <when condition="@(context.Response.StatusCode == 404)">
                <!-- Add specific headers for not found responses -->
                <set-header name="Cache-Control" exists-action="override">
                    <value>no-cache, no-store, must-revalidate</value>
                </set-header>
            </when>
        </choose>
        
        <!-- Add response metadata -->
        <set-header name="X-Response-Time" exists-action="override">
            <value>@(DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"))</value>
        </set-header>
        <set-header name="X-Car-ID" exists-action="override">
            <value>@((string)context.Variables["carId"])</value>
        </set-header>
        
        <trace source="get-car-by-id-operation-outbound">
            <message>@{
                return $"Car details response - ID: {context.Variables["carId"]}, Status: {context.Response.StatusCode}, Cached: {context.Response.Headers.ContainsKey("Cache-Control")}";
            }</message>
        </trace>
    </outbound>
    
    <on-error>
        <!-- Operation-specific error handling -->
        <choose>
            <when condition="@(context.LastError.Source == "validate-parameters")">
                <return-response>
                    <set-status code="400" reason="Bad Request" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/problem+json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("type", "https://tools.ietf.org/html/rfc7231#section-6.5.1"),
                            new JProperty("title", "Bad Request"),
                            new JProperty("status", 400),
                            new JProperty("detail", "Invalid car ID parameter."),
                            new JProperty("instance", context.Request.Url.Path),
                            new JProperty("trace-id", context.RequestId)
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
        
        <trace source="get-car-by-id-operation-error">
            <message>@{
                return $"Error in get-car-by-id operation - ID: {context.Variables["carId"]}, Error: {context.LastError.Message}";
            }</message>
        </trace>
    </on-error>
</policies>